#!/bin/bash

# Smart SDL3 Binding Checker Helper
# =================================
# This script automatically detects available modern CLI tools and uses the best
# available method to find and check SDL3 header bindings.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SDL_PATHS=(
    "/usr/local/include/SDL3"
    "/usr/include/SDL3"
    "/opt/homebrew/include/SDL3"
    "/usr/local/opt/sdl3/include/SDL3"
)

EXCLUDE_PATTERNS=(
    "test"
    "internal"
    "revision"
    "copying"
    "begin_code"
    "close_code"
    "oldnames"
    "platform_defines"
)

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to print usage
show_usage() {
    cat << EOF
Smart SDL3 Binding Checker

USAGE:
    $(basename "$0") [OPTIONS] [PATTERN]

OPTIONS:
    -i, --interactive    Use interactive mode (fzf) if available
    -c, --content TERM   Find headers containing specific term in functions
    -a, --all           Include test/internal headers (default: exclude)
    -p, --path PATH     Custom SDL3 include path
    -v, --verbose       Show detected tools and commands being run
    -h, --help          Show this help

EXAMPLES:
    $(basename "$0")                    # Check all SDL headers (smart mode)
    $(basename "$0") -i                 # Interactive selection
    $(basename "$0") -c Audio           # Headers with Audio functions
    $(basename "$0") -c GPU             # Headers with GPU functions
    $(basename "$0") audio video        # Headers matching patterns
    $(basename "$0") -p /custom/path    # Custom SDL3 path
    $(basename "$0") -a                 # Include test/internal headers

DETECTED TOOLS:
EOF

    # Show available tools
    for tool in fzf rg fd bat exa; do
        if command_exists "$tool"; then
            print_status "$GREEN" "    ✓ $tool - available"
        else
            print_status "$RED" "    ✗ $tool - not available"
        fi
    done

    echo
    echo "INSTALL MODERN TOOLS:"
    echo "    brew install fzf ripgrep fd bat exa       # macOS"
    echo "    sudo apt install fzf ripgrep fd-find      # Ubuntu"
    echo "    sudo pacman -S fzf ripgrep fd             # Arch"
}

# Function to find SDL3 paths
find_sdl_paths() {
    for path in "${SDL_PATHS[@]}"; do
        if [[ -d "$path" ]]; then
            echo "$path"
        fi
    done
}

# Function to build exclude pattern for grep/rg
build_exclude_pattern() {
    local pattern=""
    for exclude in "${EXCLUDE_PATTERNS[@]}"; do
        if [[ -n "$pattern" ]]; then
            pattern="$pattern|"
        fi
        pattern="$pattern$exclude"
    done
    echo "($pattern)"
}

# Function to find headers with traditional tools
find_headers_traditional() {
    local paths=("$@")
    local exclude_pattern
    exclude_pattern=$(build_exclude_pattern)

    for path in "${paths[@]}"; do
        find "$path" -name "SDL_*.h" -type f 2>/dev/null
    done | if [[ "$INCLUDE_ALL" == "true" ]]; then
        cat
    else
        grep -v -E "$exclude_pattern"
    fi
}

# Function to find headers with fd
find_headers_fd() {
    local paths=("$@")
    local exclude_pattern
    exclude_pattern=$(build_exclude_pattern)

    for path in "${paths[@]}"; do
        fd 'SDL_.*\.h$' "$path" --type f 2>/dev/null
    done | if [[ "$INCLUDE_ALL" == "true" ]]; then
        cat
    else
        grep -v -E "$exclude_pattern"
    fi
}

# Function to find headers with content filtering
find_headers_with_content() {
    local content_term="$1"
    local paths=("${@:2}")

    if command_exists rg; then
        for path in "${paths[@]}"; do
            rg --files-with-matches "SDL_DECLSPEC.*SDLCALL.*$content_term" "$path" 2>/dev/null
        done
    else
        print_status "$YELLOW" "Warning: ripgrep not available for content filtering"
        find_headers_best "${paths[@]}"
    fi
}

# Function to find headers with pattern matching
find_headers_with_patterns() {
    local patterns=("$@")
    local last_arg_index=$((${#patterns[@]} - 1))
    local paths_start_index=$((${#patterns[@]}))

    # Remove the paths from patterns array - they're passed separately
    local paths_arg=("${@:$paths_start_index}")

    local all_headers
    all_headers=$(find_headers_best "${paths_arg[@]}")

    local matched_headers=""
    for pattern in "${patterns[@]}"; do
        local matches
        matches=$(echo "$all_headers" | grep -i "$pattern")
        if [[ -n "$matches" ]]; then
            matched_headers="$matched_headers$matches"$'\n'
        fi
    done

    echo "$matched_headers" | grep -v '^$' | sort -u
}

# Function to choose best header finding method
find_headers_best() {
    local paths=("$@")

    if command_exists fd; then
        if [[ "$VERBOSE" == "true" ]]; then
            print_status "$BLUE" "Using fd for fast file discovery"
        fi
        find_headers_fd "${paths[@]}"
    else
        if [[ "$VERBOSE" == "true" ]]; then
            print_status "$BLUE" "Using traditional find command"
        fi
        find_headers_traditional "${paths[@]}"
    fi
}

# Function for interactive header selection
interactive_selection() {
    local headers="$1"

    if ! command_exists fzf; then
        print_status "$RED" "Error: fzf not available for interactive mode"
        echo "$headers"
        return
    fi

    local preview_cmd="echo 'Header: {}'; echo; head -20 {}"
    if command_exists bat; then
        preview_cmd="bat --color=always --style=header,grid --line-range=:30 {}"
    fi

    echo "$headers" | fzf \
        --multi \
        --preview "$preview_cmd" \
        --preview-window=right:60% \
        --header 'Select SDL3 headers to check (TAB for multi-select, ENTER to confirm)' \
        --prompt 'SDL3 Headers> ' \
        --border \
        --height=80%
}

# Main execution function
main() {
    local interactive=false
    local content_term=""
    local custom_path=""
    local patterns=()

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--interactive)
                interactive=true
                shift
                ;;
            -c|--content)
                content_term="$2"
                shift 2
                ;;
            -a|--all)
                INCLUDE_ALL=true
                shift
                ;;
            -p|--path)
                custom_path="$2"
                shift 2
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            -*)
                print_status "$RED" "Unknown option: $1"
                show_usage
                exit 1
                ;;
            *)
                patterns+=("$1")
                shift
                ;;
        esac
    done

    # Determine SDL paths
    local sdl_paths
    if [[ -n "$custom_path" ]]; then
        if [[ ! -d "$custom_path" ]]; then
            print_status "$RED" "Error: Custom path does not exist: $custom_path"
            exit 1
        fi
        sdl_paths=("$custom_path")
    else
        local found_paths
        found_paths=$(find_sdl_paths)
        if [[ -z "$found_paths" ]]; then
            print_status "$RED" "Error: No SDL3 installation found in standard locations"
            echo "Standard locations checked:"
            for path in "${SDL_PATHS[@]}"; do
                echo "  - $path"
            done
            echo
            echo "Use -p/--path to specify a custom location"
            exit 1
        else
            # Convert to array
            local temp_array=()
            while IFS= read -r line; do
                temp_array+=("$line")
            done <<< "$found_paths"
            sdl_paths=("${temp_array[@]}")
        fi
    fi

    if [[ "$VERBOSE" == "true" ]]; then
        print_status "$CYAN" "Found SDL3 installations:"
        for path in "${sdl_paths[@]}"; do
            echo "  - $path"
        done
        echo
    fi

    # Find headers based on options
    local headers
    if [[ -n "$content_term" ]]; then
        if [[ "$VERBOSE" == "true" ]]; then
            print_status "$PURPLE" "Searching for headers with '$content_term' functions..."
        fi
        headers=$(find_headers_with_content "$content_term" "${sdl_paths[@]}")
    elif [[ ${#patterns[@]} -gt 0 ]]; then
        if [[ "$VERBOSE" == "true" ]]; then
            print_status "$PURPLE" "Searching for headers matching patterns: ${patterns[*]}"
        fi
        # Get all headers first, then filter by patterns
        local all_headers
        all_headers=$(find_headers_best "${sdl_paths[@]}")

        local matched_headers=""
        for pattern in "${patterns[@]}"; do
            local matches
            matches=$(echo "$all_headers" | grep -i "$pattern")
            if [[ -n "$matches" ]]; then
                if [[ -n "$matched_headers" ]]; then
                    matched_headers="$matched_headers"$'\n'"$matches"
                else
                    matched_headers="$matches"
                fi
            fi
        done
        headers=$(echo "$matched_headers" | sort -u)
    else
        headers=$(find_headers_best "${sdl_paths[@]}")
    fi

    if [[ -z "$headers" ]]; then
        print_status "$RED" "No matching SDL3 headers found"
        exit 1
    fi

    # Interactive selection if requested
    if [[ "$interactive" == "true" ]]; then
        headers=$(interactive_selection "$headers")
        if [[ -z "$headers" ]]; then
            print_status "$YELLOW" "No headers selected"
            exit 0
        fi
    fi

    # Count headers
    local header_count
    header_count=$(echo "$headers" | wc -l)

    print_status "$GREEN" "Checking $header_count SDL3 header(s)..."
    if [[ "$VERBOSE" == "true" ]]; then
        echo "$headers" | sed 's/^/  - /'
        echo
    fi

    # Run the binding checker
    echo "$headers" | cabal exec binding-checker
}

# Set defaults
INCLUDE_ALL=false
VERBOSE=false

# Check if cabal and binding-checker are available
if ! command_exists cabal; then
    print_status "$RED" "Error: cabal not found. Please install Haskell and cabal."
    exit 1
fi

# Run main function
main "$@"
